
#ifndef _MESH_BUILDER_HPP_
#define _MESH_BUILDER_HPP_

#include "Core.hpp"
#include "Params.hpp"

namespace gf {

    /**
     * @brief Builder class for building the mesh
     * In the Mesh class constructor, the MeshBuilderStrategy::construct() method
     * is called. Depending on the command line argument passed, it either builds
     * the mesh internally or imports it from gmsh
     */
    class MeshBuilderStrategy{
    public:

        /**
         * @brief Constructor taking the domain parameters and verbosity flag
         */
        MeshBuilderStrategy(const Domain& d, bool v = false)
        : M_domain(d), verbose(v) {}

        /**
         * @brief Construct the mesh by building it and initializing regions.
         * This is the entry point for all mesh creation logic.
         */
        void construct(getfem::mesh&) const;

        virtual ~MeshBuilderStrategy() = default;

    protected:

        bool verbose; ///< Flag to control verbosity of the mesh building process
        Domain M_domain; ///< The domain parameters used for mesh construction

        /**
         * @brief Null method to build the mesh, overridden in the hierarchy
         * They get a reference to the mesh object, modifying it
         */
        virtual void buildMesh(getfem::mesh&) const = 0;

        /**
         * @brief Initializes the region
         * The method does nothing by default, and it's overridden by the
         * built-in builder only
         * @param m The mesh object to initialize regions for
         */
        virtual void initRegions(getfem::mesh&) const = 0;

    };


    /**
     * @brief Concrete mesh builder strategies
     * The built-in builder creates the mesh using getfem's built-in methods.
     */
    class BuiltInBuilder : public MeshBuilderStrategy {

    public:
        BuiltInBuilder(const Domain& d, bool v = false):
        MeshBuilderStrategy(d,v) {}

        /**
         * @brief Builds the mesh using getfem's built-in methods
         * The mesh is created based on the domain parameters specified in the Domain object.
         * It creates a 3D mesh with a rectangular prism shape.
         */
        void buildMesh(getfem::mesh&) const override;

        /**
         * @brief Initializes regions for the domain and the boundary with information read from the datafile
         * Cuts the domain at x=0, creating a Left and a Right portion of the bulk
         */
        virtual void initRegions(getfem::mesh&) const override;

    };


    /**
     * @brief Concrete mesh builder strategy for Gmsh
     * This class reads the mesh from a .msh file generated by Gmsh.
     * It is used when the user wants to import a pre-built mesh.
     */
    class GmshBuilder : public MeshBuilderStrategy {

    public:
        
        GmshBuilder(const Domain& d, bool v = false):
        MeshBuilderStrategy(d,v) {}

        /**
         * @brief Builds the mesh reading information from the .msh file.
         * It relies on generateMeshFile() to create the .geo file and call Gmsh.
         */
        void buildMesh(getfem::mesh&) const override;

        /**
         * @brief Post-process the fault regions automatically imported
         */
        virtual void initRegions(getfem::mesh&) const override;
    
    private:
        
        /**
         * @brief Generates the .geo file based on the domain parameters
         * This method:
         * - generates the .geo file based on the domain parameters
         * - calls gmsh as a sumprocess to create the .msh file
         * - imports the .msh file.
         */
        void generateMeshFile() const;

    };




}

#endif // _MESH_BUILDER_HPP_